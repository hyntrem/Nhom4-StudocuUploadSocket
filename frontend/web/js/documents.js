// File: frontend/web/js/myfiles.js

// ƒê·ªãnh nghƒ©a ƒë·ªãa ch·ªâ API Backend (t·ª´ app.py)
const API_URL = "http://127.0.0.1:5000";

// Ch·∫°y code khi trang ƒë√£ t·∫£i xong
document.addEventListener("DOMContentLoaded", () => {
    
    // 1. KI·ªÇM TRA X√ÅC TH·ª∞C
    const token = localStorage.getItem("jwtToken");
    // N·∫øu c√≥ token th√¨ setup header (·∫©n n√∫t ƒëƒÉng nh·∫≠p), n·∫øu kh√¥ng c√≥ token v·∫´n cho ph√©p xem danh s√°ch
    if (token) {
        setupHeader(token);
    }

    // 2. T·∫¢I D·ªÆ LI·ªÜU (n·∫øu kh√¥ng c√≥ token, backend s·∫Ω tr·∫£ v·ªÅ t√†i li·ªáu public)
    loadUserFiles(token);

    // 3. G·∫ÆN S·ª∞ KI·ªÜN CHO MODAL
    addModalListeners(token);
});

/**
 * C·∫≠p nh·∫≠t Header: ·∫®n n√∫t Login/Register, hi·ªán Avatar
 */
function setupHeader(token) {
    // ƒêo·∫°n code n√†y t∆∞∆°ng t·ª± login.html, ƒë·∫£m b·∫£o header ƒë·ªìng b·ªô
    // (B·∫°n c√≥ th·ªÉ t√°ch ƒëo·∫°n n√†y ra file main.js chung sau)
    const loginBtn = document.getElementById("loginBtn");
    const registerBtn = document.getElementById("registerBtn");
    const avatar = document.getElementById("userAvatar");

    if (token) {
        loginBtn.classList.add("hidden");
        registerBtn.classList.add("hidden");
        avatar.classList.remove("hidden");

        avatar.addEventListener("click", () => {
            if (confirm("B·∫°n c√≥ mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?")) {
                localStorage.removeItem("jwtToken");
                localStorage.removeItem("userName");
                window.location.href = "login.html";
            }
        });
    }
}

/**
 * G·ªçi API GET /api/documents?user=true ƒë·ªÉ l·∫•y file c·ªßa user
 */
async function loadUserFiles(token) {
    const container = document.getElementById("file-list-container");
    const loadingText = document.getElementById("loading-text");

    try {
        // N·∫øu c√≥ token, y√™u c·∫ßu t√†i li·ªáu c·ªßa user (user=true) ƒë·ªÉ hi·ªÉn th·ªã c·∫£ t√†i li·ªáu c·ªßa h·ªç v√† public
        // N·∫øu kh√¥ng c√≥ token, g·ªçi endpoint chung ƒë·ªÉ nh·∫≠n c√°c t√†i li·ªáu public
        const url = token ? `${API_URL}/api/documents?user=true` : `${API_URL}/api/documents`;
        const headers = {};
        if (token) headers['Authorization'] = `Bearer ${token}`;

        const response = await fetch(url, { method: 'GET', headers });

        if (response.status === 401) {
            // N·∫øu token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá, x√≥a token v√† th·ª≠ l·∫°i ƒë·ªÉ l·∫•y public docs
            if (token) {
                localStorage.removeItem('jwtToken');
                // T·∫£i l·∫°i danh s√°ch kh√¥ng c·∫ßn token
                return loadUserFiles(null);
            }
        }

        const data = await response.json();

        if (response.ok) {
            loadingText.classList.add("hidden"); // ·∫®n "ƒêang t·∫£i..."
            // Pass token forward so event handlers can authenticate (token may be null)
            renderFiles(data.documents, token);
        } else {
            loadingText.textContent = `L·ªói: ${data.message}`;
        }
    } catch (error) {
        console.error("L·ªói k·∫øt n·ªëi:", error);
        loadingText.textContent = "L·ªói k·∫øt n·ªëi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.";
    }
}

/**
 * Hi·ªÉn th·ªã danh s√°ch file ra giao di·ªán
 */
function renderFiles(files, token) {
    const container = document.getElementById("file-list-container");
    container.innerHTML = ""; // X√≥a s·∫°ch container

    if (!files || files.length === 0) {
        container.innerHTML = "<p>B·∫°n ch∆∞a t·∫£i l√™n t√†i li·ªáu n√†o. H√£y th·ª≠ t·∫£i l√™n m·ªôt file!</p>";
        return;
    }

    files.forEach(file => {
        const fileCard = document.createElement("div");
        fileCard.className = "doc-card"; // T·∫≠n d·ª•ng style c√≥ s·∫µn t·ª´ style.css

        // Chuy·ªÉn m·∫£ng tags th√†nh chu·ªói (guard n·∫øu tags undefined)
        const tagsString = (file.tags || []).join(', ');

        // N·ªôi dung hi·ªÉn th·ªã (an to√†n)
        const title = document.createElement('h3');
        title.textContent = file.filename || '';

        const desc = document.createElement('p');
        desc.className = 'desc';
        desc.innerHTML = file.description ? escapeHTML(file.description) : '<i>Ch∆∞a c√≥ m√¥ t·∫£</i>';

        const infoRow1 = document.createElement('div');
        infoRow1.className = 'info-row';
        infoRow1.innerHTML = `<strong>Tr·∫°ng th√°i:</strong> <span class="status ${file.visibility}">${file.visibility === 'public' ? 'C√¥ng khai' : 'Ri√™ng t∆∞'}</span>`;

        const infoRow2 = document.createElement('div');
        infoRow2.className = 'info-row';
        infoRow2.innerHTML = `<strong>Tags:</strong> <span>${tagsString || '<i>Kh√¥ng c√≥ th·∫ª</i>'}</span>`;

        const actions = document.createElement('div');
        actions.className = 'doc-card-actions';

        // Only show edit/delete actions if user is authenticated (token present)
        if (token) {
            // Create Edit button and set dataset safely
            const editBtn = document.createElement('button');
            editBtn.className = 'btn-action btn-edit';
            editBtn.type = 'button';
            editBtn.textContent = '‚úèÔ∏è S·ª≠a';
            editBtn.dataset.id = file.id;
            editBtn.dataset.filename = file.filename || '';
            editBtn.dataset.description = file.description || '';
            editBtn.dataset.visibility = file.visibility || '';
            editBtn.dataset.tags = tagsString;

            // Create Delete button
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'btn-action btn-delete';
            deleteBtn.type = 'button';
            deleteBtn.textContent = 'üóëÔ∏è X√≥a';
            deleteBtn.dataset.id = file.id;

            actions.appendChild(editBtn);
            actions.appendChild(deleteBtn);
        }

        // Append all pieces to card
        fileCard.appendChild(title);
        fileCard.appendChild(desc);
        fileCard.appendChild(infoRow1);
        fileCard.appendChild(infoRow2);
        fileCard.appendChild(actions);

        container.appendChild(fileCard);
    });

    // Sau khi render, g·∫Øn m·ªôt l·∫ßn listener (delegation) cho container
    addCardButtonListeners(token);
}

/**
 * G·∫Øn s·ª± ki·ªán cho c√°c n√∫t S·ª≠a/X√≥a tr√™n m·ªói th·∫ª
 */
function addCardButtonListeners(token) {
    const container = document.getElementById("file-list-container");

    // Use event delegation: one listener for edit/delete actions
    // Remove existing delegated listener if present (idempotent attach)
    if (container._hasDelegatedListener) return;

    container.addEventListener('click', async (e) => {
        const editBtn = e.target.closest('.btn-edit');
        if (editBtn) {
            showEditModal(editBtn.dataset);
            return;
        }

        const deleteBtn = e.target.closest('.btn-delete');
        if (deleteBtn) {
            const fileId = deleteBtn.dataset.id;
            if (!fileId) return;
            if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a file n√†y kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.")) {
                try {
                    const headers = {};
                    if (token) headers['Authorization'] = `Bearer ${token}`;
                    const response = await fetch(`${API_URL}/api/documents/${fileId}`, {
                        method: "DELETE",
                        headers
                    });
                    const data = await response.json();
                    
                    if (response.ok) {
                        alert("X√≥a t√†i li·ªáu th√†nh c√¥ng!");
                        loadUserFiles(token); // T·∫£i l·∫°i danh s√°ch file
                    } else {
                        alert(`L·ªói: ${data.message}`);
                    }
                } catch (error) {
                    alert("L·ªói k·∫øt n·ªëi khi x√≥a file.");
                }
            }
            return;
        }
    });

    container._hasDelegatedListener = true;
}

/**
 * Hi·ªÉn th·ªã modal v√† ƒëi·ªÅn th√¥ng tin file v√†o form
 */
function showEditModal(data) {
    // ƒêi·ªÅn d·ªØ li·ªáu t·ª´ file v√†o form trong modal
    document.getElementById("edit-id").value = data.id || '';
    document.getElementById("edit-filename").value = data.filename || '';
    document.getElementById("edit-description").value = data.description || '';
    document.getElementById("edit-visibility").value = data.visibility || 'private';
    document.getElementById("edit-tags").value = data.tags || '';

    // Hi·ªÉn th·ªã modal v√† c·∫≠p nh·∫≠t thu·ªôc t√≠nh ARIA
    const overlay = document.getElementById("edit-modal-overlay");
    overlay.classList.remove("hidden");
    overlay.setAttribute('aria-hidden', 'false');

    // Focus v√†o textarea m√¥ t·∫£ ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p ngay
    const desc = document.getElementById('edit-description');
    if (desc && typeof desc.focus === 'function') desc.focus();
}

// H√†m ·∫©n modal (ƒë·∫∑t global ƒë·ªÉ c√≥ th·ªÉ d√πng t·ª´ nhi·ªÅu n∆°i)
function hideModal() {
    const overlay = document.getElementById("edit-modal-overlay");
    if (!overlay) return;
    overlay.classList.add("hidden");
    overlay.setAttribute('aria-hidden', 'true');
    // Blur active element to avoid keeping focus on removed controls
    try { if (document.activeElement && document.activeElement.blur) document.activeElement.blur(); } catch (e) {}
}

/**
 * G·∫Øn s·ª± ki·ªán cho c√°c n√∫t trong Modal (L∆∞u, H·ªßy, ƒê√≥ng)
 */
function addModalListeners(token) {
    const modalOverlay = document.getElementById("edit-modal-overlay");
    const closeModalBtn = document.getElementById("modal-close-btn");
    const cancelModalBtn = document.getElementById("modal-cancel-btn");
    const saveModalBtn = document.getElementById("modal-save-btn");

    // G·∫Øn s·ª± ki·ªán s·ª≠ d·ª•ng global hideModal
    closeModalBtn.addEventListener("click", hideModal);
    cancelModalBtn.addEventListener("click", hideModal);

    // X·ª≠ l√Ω khi nh·∫•n L∆ØU THAY ƒê·ªîI
    saveModalBtn.addEventListener("click", async () => {
        // L·∫•y d·ªØ li·ªáu t·ª´ form
        const fileId = document.getElementById("edit-id").value;
        const description = document.getElementById("edit-description").value;
        const visibility = document.getElementById("edit-visibility").value;
        const tagsInput = document.getElementById("edit-tags").value;
        
        // Chuy·ªÉn chu·ªói tags th√†nh m·∫£ng
        const tagsArray = tagsInput.split(',')
                                   .map(tag => tag.trim())
                                   .filter(tag => tag.length > 0);

        // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n API (theo app.py)
        const updateData = {
            description: description,
            visibility: visibility,
            tags: tagsArray
        };

        try {
            const headers = { "Content-Type": "application/json" };
            if (token) headers['Authorization'] = `Bearer ${token}`;

            const response = await fetch(`${API_URL}/api/documents/${fileId}`, {
                method: "PUT",
                headers,
                body: JSON.stringify(updateData)
            });

            const data = await response.json();
            if (response.ok) {
                alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                hideModal();
                loadUserFiles(token); // T·∫£i l·∫°i danh s√°ch file ƒë·ªÉ th·∫•y thay ƒë·ªïi
            } else {
                alert(`L·ªói: ${data.message}`);
            }
        } catch (error) {
            alert("L·ªói k·∫øt n·ªëi khi c·∫≠p nh·∫≠t.");
        }
    });
}

/**
 * H√†m b·∫£o m·∫≠t nh·ªè: Ch·ªëng XSS (Cross-site scripting)
 * B·∫±ng c√°ch thay th·∫ø k√Ω t·ª± < > ƒë·ªÉ tr√¨nh duy·ªát kh√¥ng hi·ªÉu l√† HTML
 */
function escapeHTML(str) {
    if (str === null || str === undefined) return '';
    return String(str).replace(/</g, "&lt;").replace(/>/g, "&gt;");
}